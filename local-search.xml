<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>slick 通用查询工具（带分页）</title>
    <link href="/2020/08/29/slick%20%E9%80%9A%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7%EF%BC%88%E5%B8%A6%E5%88%86%E9%A1%B5%EF%BC%89/"/>
    <url>/2020/08/29/slick%20%E9%80%9A%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7%EF%BC%88%E5%B8%A6%E5%88%86%E9%A1%B5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1-首先定义一个CRUD特质"><a href="#1-首先定义一个CRUD特质" class="headerlink" title="1. 首先定义一个CRUD特质"></a>1. 首先定义一个CRUD特质</h1><pre><code class="hljs scala"><span class="hljs-keyword">package</span> repos<span class="hljs-keyword">import</span> repos.table.<span class="hljs-type">Tables</span>.profile.api._<span class="hljs-keyword">import</span> slick.jdbc.<span class="hljs-type">JdbcProfile</span><span class="hljs-keyword">import</span> slick.lifted.<span class="hljs-type">TableQuery</span><span class="hljs-keyword">import</span> scala.concurrent.duration.<span class="hljs-type">Duration</span><span class="hljs-keyword">import</span> scala.concurrent.&#123;<span class="hljs-type">Await</span>, <span class="hljs-type">Future</span>, <span class="hljs-type">Promise</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Slick CRUD util</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @author Rubin</span><span class="hljs-comment"> * @version v1 2020/8/26 11:52</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">CRUD</span>[<span class="hljs-type">M</span> &lt;: <span class="hljs-type">Model</span>, <span class="hljs-type">R</span>] </span>&#123;  <span class="hljs-keyword">val</span> database: <span class="hljs-type">JdbcProfile</span>#<span class="hljs-type">Backend</span>#<span class="hljs-type">Database</span>  <span class="hljs-keyword">val</span> table: <span class="hljs-type">AnyRef</span>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTable</span></span>: <span class="hljs-type">TableQuery</span>[<span class="hljs-type">Table</span>[<span class="hljs-type">R</span>]] = table.asInstanceOf[<span class="hljs-type">TableQuery</span>[<span class="hljs-type">Table</span>[<span class="hljs-type">R</span>]]]  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span></span>(entity: <span class="hljs-type">R</span>): <span class="hljs-type">Future</span>[<span class="hljs-type">Unit</span>] = database.run(<span class="hljs-type">DBIO</span>.seq(getTable += entity))  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span></span>(fdId: <span class="hljs-type">String</span>): <span class="hljs-type">Future</span>[<span class="hljs-type">Int</span>] = database.run(getTable.filter(_.asInstanceOf[<span class="hljs-type">M</span>].fdId === fdId).delete)  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span></span>(entity: <span class="hljs-type">R</span>): <span class="hljs-type">Future</span>[<span class="hljs-type">Int</span>] = database.run(getTable.insertOrUpdate(entity))  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findById</span></span>(fdId: <span class="hljs-type">String</span>): <span class="hljs-type">Future</span>[<span class="hljs-type">R</span>] = database.run(getTable.filter(_.asInstanceOf[<span class="hljs-type">M</span>].fdId === fdId).result.head)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page</span></span>(page: <span class="hljs-type">Page</span>[<span class="hljs-type">R</span>]): <span class="hljs-type">Future</span>[<span class="hljs-type">Page</span>[<span class="hljs-type">R</span>]] = &#123;    <span class="hljs-keyword">val</span> p = <span class="hljs-type">Promise</span>[<span class="hljs-type">Page</span>[<span class="hljs-type">R</span>]]    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">val</span> data = database.run(getTable.drop(page.page).take(page.limit).result)      <span class="hljs-keyword">val</span> size = database.run(getTable.size.result)      page.data = <span class="hljs-type">Await</span>.result(data, <span class="hljs-type">Duration</span>.<span class="hljs-type">Inf</span>)      page.totalCount = <span class="hljs-type">Await</span>.result(size, <span class="hljs-type">Duration</span>.<span class="hljs-type">Inf</span>)      page.setTotalPage()    &#125; <span class="hljs-keyword">catch</span> &#123;      <span class="hljs-keyword">case</span> _: <span class="hljs-type">Throwable</span> =&gt; p.failure _    &#125;    p.success(page)    p.future  &#125;  &#125;</code></pre><h1 id="2-再建一个-Model特质"><a href="#2-再建一个-Model特质" class="headerlink" title="2. 再建一个 Model特质"></a>2. 再建一个 Model特质</h1><p>在指定ID查询和删除时用，根据实际情况定义字段。</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> slick.crud<span class="hljs-keyword">import</span> slick.lifted.<span class="hljs-type">Rep</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * @author Rubin</span><span class="hljs-comment"> * @version v1 2020/8/26 12:50</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Model</span> </span>&#123;  <span class="hljs-keyword">val</span> fdId: <span class="hljs-type">Rep</span>[<span class="hljs-type">String</span>]&#125;</code></pre><h1 id="3-Page"><a href="#3-Page" class="headerlink" title="3. Page"></a>3. Page</h1><p>setTotalPage 在查询到总数的时候需要显示的调用一下，因为查询是异步的，直接引用的话拿不到实际值。</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> slick.crud<span class="hljs-comment">/**</span><span class="hljs-comment"> * @author Rubin</span><span class="hljs-comment"> * @version v1 2020/8/25 11:20</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span>[<span class="hljs-type">T</span>](<span class="hljs-params">page_ : <span class="hljs-type">Int</span> = 1, limit_ : <span class="hljs-type">Int</span> = 10</span>) </span>&#123;  <span class="hljs-keyword">val</span> page: <span class="hljs-type">Int</span> = page_  <span class="hljs-keyword">val</span> limit: <span class="hljs-type">Int</span> = limit_  <span class="hljs-keyword">var</span> totalCount: <span class="hljs-type">Int</span> = _  <span class="hljs-keyword">var</span> totalPage: <span class="hljs-type">Int</span> = _  <span class="hljs-keyword">var</span> data: <span class="hljs-type">Seq</span>[<span class="hljs-type">T</span>] = _  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setTotalPage</span></span>(): <span class="hljs-type">Unit</span> = &#123;    <span class="hljs-keyword">val</span> count = totalCount / limit_    <span class="hljs-keyword">if</span> (totalCount % limit_ == <span class="hljs-number">0</span>) totalPage = count <span class="hljs-keyword">else</span> totalPage = count + <span class="hljs-number">1</span>  &#125;&#125;</code></pre><h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h1><p><strong>1. 修改 slick-codegen 生成的代码，将表对应的对象添加 Model特质。</strong></p><p><code>class TestUser(_tableTag: Tag) extends profile.api.Table[TestUserRow](_tableTag, Some(&quot;test&quot;), &quot;test_user&quot;) with Model &#123;</code></p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> slick.table<span class="hljs-keyword">import</span> slick.crud.<span class="hljs-type">Model</span><span class="hljs-comment">// AUTO-GENERATED Slick data model</span><span class="hljs-comment">/** Stand-alone Slick data model for immediate use */</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Tables</span> <span class="hljs-keyword">extends</span> </span>&#123;  <span class="hljs-keyword">val</span> profile = slick.jdbc.<span class="hljs-type">MySQLProfile</span>&#125; <span class="hljs-keyword">with</span> <span class="hljs-type">Tables</span><span class="hljs-comment">/** Slick data model trait for extension, choice of backend or usage in the cake pattern. (Make sure to initialize this late.) */</span><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Tables</span> </span>&#123;  <span class="hljs-keyword">val</span> profile: slick.jdbc.<span class="hljs-type">JdbcProfile</span>  <span class="hljs-keyword">import</span> profile.api._  <span class="hljs-keyword">import</span> slick.model.<span class="hljs-type">ForeignKeyAction</span>  <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> GetResult mappers for plain SQL are only generated for tables where Slick knows how to map the types of all columns.</span>  <span class="hljs-keyword">import</span> slick.jdbc.&#123;<span class="hljs-type">GetResult</span> =&gt; <span class="hljs-type">GR</span>&#125;  <span class="hljs-comment">/** DDL for all tables. Call .create to execute. */</span>  <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> schema: profile.<span class="hljs-type">SchemaDescription</span> = <span class="hljs-type">TestUser</span>.schema  <span class="hljs-meta">@deprecated</span>(<span class="hljs-string">&quot;Use .schema instead of .ddl&quot;</span>, <span class="hljs-string">&quot;3.0&quot;</span>)  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ddl</span> </span>= schema  <span class="hljs-comment">/** Entity class storing rows of table TestUser</span><span class="hljs-comment">   *  @param fdid Database column fdId SqlType(VARCHAR), PrimaryKey, Length(64,true)</span><span class="hljs-comment">   *  @param fdname Database column fdName SqlType(VARCHAR), Length(255,true), Default(None) */</span>  <span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUserRow</span>(<span class="hljs-params">fdid: <span class="hljs-type">String</span>, fdname: <span class="hljs-type">Option</span>[<span class="hljs-type">String</span>] = <span class="hljs-type">None</span></span>)</span><span class="hljs-class">  <span class="hljs-title">/**</span> <span class="hljs-title">GetResult</span> <span class="hljs-title">implicit</span> <span class="hljs-title">for</span> <span class="hljs-title">fetching</span> <span class="hljs-title">TestUserRow</span> <span class="hljs-title">objects</span> <span class="hljs-title">using</span> <span class="hljs-title">plain</span> <span class="hljs-title">SQL</span> <span class="hljs-title">queries</span> <span class="hljs-title">*/</span></span><span class="hljs-class">  <span class="hljs-title">implicit</span> <span class="hljs-title">def</span> <span class="hljs-title">GetResultTestUserRow</span>(<span class="hljs-params">implicit e0: <span class="hljs-type">GR</span>[<span class="hljs-type">String</span>], e1: <span class="hljs-type">GR</span>[<span class="hljs-type">Option</span>[<span class="hljs-type">String</span>]]</span>)</span>: <span class="hljs-type">GR</span>[<span class="hljs-type">TestUserRow</span>] = <span class="hljs-type">GR</span>&#123;    prs =&gt; <span class="hljs-keyword">import</span> prs._    <span class="hljs-type">TestUserRow</span>.tupled((&lt;&lt;[<span class="hljs-type">String</span>], &lt;&lt;?[<span class="hljs-type">String</span>]))  &#125;  <span class="hljs-comment">/** Table description of table test_user. Objects of this class serve as prototypes for rows in queries. */</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUser</span>(<span class="hljs-params">_tableTag: <span class="hljs-type">Tag</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">profile</span>.<span class="hljs-title">api</span>.<span class="hljs-title">Table</span>[<span class="hljs-type">TestUserRow</span>](<span class="hljs-params">_tableTag, <span class="hljs-type">Some</span>(&quot;test&quot;</span>), &quot;<span class="hljs-title">test_user</span>&quot;) <span class="hljs-keyword">with</span> <span class="hljs-title">Model</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">*</span> </span>= (fdId, fdName) &lt;&gt; (<span class="hljs-type">TestUserRow</span>.tupled, <span class="hljs-type">TestUserRow</span>.unapply)    <span class="hljs-comment">/** Maps whole row to an option. Useful for outer joins. */</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">?</span> </span>= ((<span class="hljs-type">Rep</span>.<span class="hljs-type">Some</span>(fdId), fdName)).shaped.&lt;&gt;(&#123;r=&gt;<span class="hljs-keyword">import</span> r._; _1.map(_=&gt; <span class="hljs-type">TestUserRow</span>.tupled((_1.get, _2)))&#125;, (_:<span class="hljs-type">Any</span>) =&gt;  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Exception</span>(<span class="hljs-string">&quot;Inserting into ? projection not supported.&quot;</span>))    <span class="hljs-comment">/** Database column fdId SqlType(VARCHAR), PrimaryKey, Length(64,true) */</span>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> fdId: <span class="hljs-type">Rep</span>[<span class="hljs-type">String</span>] = column[<span class="hljs-type">String</span>](<span class="hljs-string">&quot;fdId&quot;</span>, <span class="hljs-type">O</span>.<span class="hljs-type">PrimaryKey</span>, <span class="hljs-type">O</span>.<span class="hljs-type">Length</span>(<span class="hljs-number">64</span>,varying=<span class="hljs-literal">true</span>))    <span class="hljs-comment">/** Database column fdName SqlType(VARCHAR), Length(255,true), Default(None) */</span>    <span class="hljs-keyword">val</span> fdName: <span class="hljs-type">Rep</span>[<span class="hljs-type">Option</span>[<span class="hljs-type">String</span>]] = column[<span class="hljs-type">Option</span>[<span class="hljs-type">String</span>]](<span class="hljs-string">&quot;fdName&quot;</span>, <span class="hljs-type">O</span>.<span class="hljs-type">Length</span>(<span class="hljs-number">255</span>,varying=<span class="hljs-literal">true</span>), <span class="hljs-type">O</span>.<span class="hljs-type">Default</span>(<span class="hljs-type">None</span>))  &#125;  <span class="hljs-comment">/** Collection-like TableQuery object for table TestUser */</span>  <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> <span class="hljs-type">TestUser</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">TableQuery</span>(tag =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">TestUser</span>(tag))&#125;</code></pre><p><strong>2. DAO with CRUD[M &lt;: Model, R]</strong></p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> dao<span class="hljs-keyword">import</span> javax.inject.<span class="hljs-type">Inject</span><span class="hljs-keyword">import</span> play.api.db.slick.&#123;<span class="hljs-type">DatabaseConfigProvider</span>, <span class="hljs-type">HasDatabaseConfigProvider</span>&#125;<span class="hljs-keyword">import</span> repos.<span class="hljs-type">CRUD</span><span class="hljs-keyword">import</span> slick.jdbc.<span class="hljs-type">JdbcProfile</span><span class="hljs-keyword">import</span> repos.table.<span class="hljs-type">Tables</span>._<span class="hljs-keyword">import</span> scala.concurrent.<span class="hljs-type">ExecutionContext</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * @author Rubin</span><span class="hljs-comment"> * @version v1 2020/8/26 17:38</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUserDAO</span>  <span class="hljs-title">@Inject</span>(<span class="hljs-params"></span>)(<span class="hljs-params">protected val dbConfigProvider: <span class="hljs-type">DatabaseConfigProvider</span></span>)</span><span class="hljs-class">                            (<span class="hljs-params">implicit executionContext: <span class="hljs-type">ExecutionContext</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">HasDatabaseConfigProvider</span>[<span class="hljs-type">JdbcProfile</span>] <span class="hljs-keyword">with</span> <span class="hljs-title">CRUD</span>[<span class="hljs-type">TestUser</span>, <span class="hljs-type">TestUserRow</span>] </span>&#123;  <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> database = db  <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> table = <span class="hljs-type">TestUser</span>  <span class="hljs-comment">// 其他业务查询...</span>  &#125;</code></pre><p><strong>3. 代码调用</strong></p><pre><code class="hljs scala"><span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">1</span> to <span class="hljs-number">500</span>) &#123;  dao1.insert(<span class="hljs-type">TestUserRow</span>(<span class="hljs-string">&quot;id_&quot;</span> + i))&#125;  dao1.delete(<span class="hljs-string">&quot;id_1&quot;</span>).onComplete &#123;  <span class="hljs-keyword">case</span> <span class="hljs-type">Success</span>(value) =&gt; println(<span class="hljs-string">s&quot;delete =&gt; <span class="hljs-subst">$value</span>&quot;</span>)&#125;dao1.findById(<span class="hljs-string">&quot;id_107&quot;</span>).onComplete &#123;  <span class="hljs-keyword">case</span> <span class="hljs-type">Success</span>(value) =&gt; println(value.toArray.mkString(<span class="hljs-string">&quot;Array(&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>, <span class="hljs-string">&quot;)&quot;</span>))&#125;dao1.update(<span class="hljs-type">TestUserRow</span>(<span class="hljs-string">&quot;id_107&quot;</span>, <span class="hljs-type">Option</span>(<span class="hljs-string">&quot;修改了&quot;</span>))).onComplete &#123;  <span class="hljs-keyword">case</span> <span class="hljs-type">Success</span>(value) =&gt; println(<span class="hljs-string">s&quot;update =&gt; <span class="hljs-subst">$value</span>&quot;</span>)&#125;</code></pre><h1 id="5-效果"><a href="#5-效果" class="headerlink" title="5. 效果"></a>5. 效果</h1><p><img src="https://img-blog.csdnimg.cn/20200826173253903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dNaW5nWmhvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200826174447356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dNaW5nWmhvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200826175209269.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200826175239762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dNaW5nWmhvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>👌 分页就不演示了，如果不觉得麻烦的话完全可以封装一个 springboot-jap 那种自动匹配的效果。</p><p>项目地址：<a href="https://gitee.com/vzhougm/slick_crud">https://gitee.com/vzhougm/slick_crud</a></p><p>最后附上官网给出的<strong>第三方通用查询工具</strong> <a href="https://github.com/strongtyped/active-slick">active-slick</a>，玩的愉快~ 😘</p>]]></content>
    
    
    
    <tags>
      
      <tag>scala</tag>
      
      <tag>slick</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
